using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Shipit
{
    
    public partial class AllBookingForm : Form
    {
        Transaction.DataTransaction trans = null;
        Transaction.DataExporter DTPEXPTR = null;
        String type = "";

        public AllBookingForm()
        {
            InitializeComponent();
            type = "normal";
            trans = new Transaction.DataTransaction ();
            tbl_editing.ReadOnly = true;

        }

        public AllBookingForm(DataTable dt)
        {
            InitializeComponent();
            type = "show";
            trans = new Transaction.DataTransaction();

            tbl_showdata.DataSource = dt;
            tabControl1.Enabled = false;
        }

        public void showalldata()
        {
            DataTable dt = trans.GetAllBookings();
            tbl_showdata.DataSource = dt;
            tbl_showdata.Columns["Factory_id"].Visible = false;
            tbl_showdata.Columns["Buyer_id"].Visible = false;
            tbl_showdata.Columns["MonthlyCapacity"].Visible = false;

        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (tabControl1.SelectedTab == tabPage1)
            {
                showalldata();
            }
            else
            {
                gridviewsetup();
                trans.getallnonapprovedentriesforEditing(tbl_editing);
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            (tbl_showdata.DataSource as DataTable).DefaultView.RowFilter = string.Format("BuyerName = '{0}'", Buyercombo .Text);

        }

        private void AllBookingForm_Load(object sender, EventArgs e)
        {
            if (type == "normal")
            {
                if (tabControl1.SelectedTab == tabPage1)
                {
                    showalldata();
                    
                    loadbuyercombo();
                    loadfactorycombo();
                }
            }
        }


        public void loadbuyercombo()
        {
            CourierDataDataContext courdatacontext = new CourierDataDataContext(Program.ConnStr);
            var q = from buyer in courdatacontext.Buyer_Masters
                    select buyer;



            Buyercombo.DataSource = q;
            Buyercombo.DisplayMember = "BuyerName";
            Buyercombo.ValueMember = "Buyer_Id";
            //   Buyercombo.DataBind();

            cmb_byredit .DataSource = q;
            cmb_byredit.DisplayMember = "BuyerName";
            cmb_byredit.ValueMember = "Buyer_Id";

        }

        public void loadfactorycombo()
        {
            CourierDataDataContext courdatacontext = new CourierDataDataContext(Program.ConnStr);
            var q = from factory in courdatacontext.Factory_Masters 
                    select factory;



            factorycombo .DataSource = q;
            factorycombo.DisplayMember = "Factory_name";
            factorycombo.ValueMember = "Factory_ID";
            //   Buyercombo.DataBind();

            cmb_fctredt .DataSource = q;
            cmb_fctredt.DisplayMember = "Factory_name";
            cmb_fctredt.ValueMember = "Factory_ID";

        }

        private void button1_Click(object sender, EventArgs e)
        {
            (tbl_showdata.DataSource as DataTable).DefaultView.RowFilter = string.Format("factory_Name = '{0}'", factorycombo .Text);
        }

        private void button3_Click(object sender, EventArgs e)
        {
            (tbl_showdata.DataSource as DataTable).DefaultView.RowFilter = string.Format("year = '{0}' and  month='{1}'", cmb_year .Text,cmb_month.Text );
        }

        private void changeFactoryToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int bookid = int.Parse(tbl_editing.Rows[tbl_editing.CurrentRow.Index].Cells[0].Value.ToString());
            String Currentfactory = tbl_editing.Rows[tbl_editing.CurrentRow.Index].Cells[1].Value.ToString();
            BookingChanges bok = new BookingChanges(bookid, Currentfactory);
            bok.ShowDialog();

            trans.getallnonapprovedentries(tbl_editing);
        }

        private void changeQuantityToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int bookid = int.Parse(tbl_editing.Rows[tbl_editing.CurrentRow.Index].Cells[0].Value.ToString());
            String Currentfactory = tbl_editing.Rows[tbl_editing.CurrentRow.Index].Cells[1].Value.ToString();
            String Year = tbl_editing.Rows[tbl_editing.CurrentRow.Index].Cells[2].Value.ToString();
            String Month = tbl_editing.Rows[tbl_editing.CurrentRow.Index].Cells[3].Value.ToString();
            int qty = int.Parse(tbl_editing.Rows[tbl_editing.CurrentRow.Index].Cells[5].Value.ToString());
            BookingChanges bok = new BookingChanges(bookid, Currentfactory, Year, Month, qty);
            bok.ShowDialog();
            trans.getallnonapprovedentries(tbl_editing);
        }

        private void changeStyleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int bookid = int.Parse(tbl_editing.Rows[tbl_editing.CurrentRow.Index].Cells[0].Value.ToString());
            String Currentstyle = tbl_editing.Rows[tbl_editing.CurrentRow.Index].Cells[6].Value.ToString();
            BookingChanges bok = new BookingChanges(bookid, Currentstyle,0);
            bok.ShowDialog();
            trans.getallnonapprovedentries(tbl_editing);
        }

        private void exportToExcelToolStripMenuItem_Click(object sender, EventArgs e)
        {
            DTPEXPTR = new Transaction.DataExporter();

            //     DTPEXPTR.exporttoexcel(dataGridView1);
            DTPEXPTR.writeCSV(tbl_editing);
        }

        private void toolStripMenuItem4_Click(object sender, EventArgs e)
        {
            DTPEXPTR = new Transaction.DataExporter();

            //     DTPEXPTR.exporttoexcel(dataGridView1);
            DTPEXPTR.writeCSV(tbl_showdata );
        }

        private void radioButton2_CheckedChanged(object sender, EventArgs e)
        {
            (tbl_showdata.DataSource as DataTable).DefaultView.RowFilter = string.Format("IsApproved = '{0}'", "R");
        }

        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {
            (tbl_showdata.DataSource as DataTable).DefaultView.RowFilter = string.Format("IsApproved = '{0}'", "A");
        }

        private void radioButton3_CheckedChanged(object sender, EventArgs e)
        {
            (tbl_showdata.DataSource as DataTable).DefaultView.RowFilter = string.Format("IsApproved = '{0}'", "N");
        }

        private void button6_Click(object sender, EventArgs e)
        {

            DataTable dt = new DataTable();
            dt = getdatatable(tbl_editing); ;
            try
            {
                //   DataTable results = dt.Select(Querystring).CopyToDataTable();
                DataTable results = dt.Select("Buyer = '" + cmb_byredit.Text + "'").CopyToDataTable();
                tbl_editing.DataSource = null;
                tbl_editing.ColumnCount = 0;
                tbl_editing.DataSource = results;
            }
            catch (Exception)
            {

                MessageBox.Show("No Pending Booking for Approval on this Search Criteria");
            }
        }

        private void button7_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            dt = getdatatable(tbl_editing); ;
            try
            {
                //   DataTable results = dt.Select(Querystring).CopyToDataTable();
                DataTable results = dt.Select("Factory = '" + cmb_fctredt .Text + "'").CopyToDataTable();
                tbl_editing.DataSource = null;
                tbl_editing.ColumnCount = 0;
                tbl_editing.DataSource  = results;
            }
            catch (Exception)
            {

                MessageBox.Show("No Pending Booking for Approval on this Search Criteria");
            }
        }



        public void gridviewsetup()
        {
            tbl_editing .DataSource = null;
            tbl_editing .ColumnCount = 0;

            tbl_editing.Columns.Add("BookID", "BookID");
            tbl_editing.Columns.Add("Factory", "Factory");
            tbl_editing.Columns.Add("Year", "Year");
            tbl_editing.Columns.Add("Month", "Month");
            tbl_editing.Columns.Add("Buyer", "Buyer");
            tbl_editing.Columns.Add("BookQty", "BookQty");

            tbl_editing.Columns.Add("Style", "Style");
           
        }


        public DataTable getdatatable(DataGridView dgv)
        {
            DataTable dt = new DataTable();
            DataColumn[] dcs = new DataColumn[] { };

            foreach (DataGridViewColumn c in dgv.Columns)
            {
                DataColumn dc = new DataColumn();
                dc.ColumnName = c.Name;
                dt.Columns.Add(dc);

            }

            foreach (DataGridViewRow r in dgv.Rows)
            {
                DataRow drow = dt.NewRow();

                foreach (DataGridViewCell cell in r.Cells)
                {
                    drow[cell.OwningColumn.Name] = cell.Value;
                }

                dt.Rows.Add(drow);
            }
            return dt;
        }

        private void button9_Click(object sender, EventArgs e)
        {
            gridviewsetup();
            trans.getallnonapprovedentriesforEditing(tbl_editing);
        }

        private void button8_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            dt = getdatatable(tbl_editing); ;
            try
            {
                //   DataTable results = dt.Select(Querystring).CopyToDataTable();
                DataTable results = dt.Select("year = '"+cmb_year.Text +"' and  month='"+cmb_month.Text +"'").CopyToDataTable();
                tbl_editing.DataSource = null;
                tbl_editing.ColumnCount = 0;
                tbl_editing.DataSource = results;
            }
            catch (Exception)
            {

                MessageBox.Show("No Pending Booking for Approval on this Search Criteria");
            }
            
        }

        private void changeStyleApprovedToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (tbl_showdata.Rows[tbl_showdata.CurrentRow.Index].Cells[10].Value.ToString().Trim() == "A" || tbl_showdata.Rows[tbl_showdata.CurrentRow.Index].Cells[10].Value.ToString().Trim() == "N")
            {
                int bookid = int.Parse(tbl_showdata.Rows[tbl_showdata.CurrentRow.Index].Cells[0].Value.ToString());
                String Currentstyle = tbl_showdata.Rows[tbl_showdata.CurrentRow.Index].Cells[9].Value.ToString();
                BookingChanges bok = new BookingChanges(bookid, Currentstyle, 0);
                bok.ShowDialog();
                showalldata();
            }
            else
            {
                MessageBox.Show("You are not Allowed to Change the Style of Rejected Booking ");

            }
        }




         //dgv is the name of your data grid view.

       

    }
}
